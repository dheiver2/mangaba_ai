#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemplo de An√°lise de Documentos com Mangaba Agent
Demonstra processamento de diferentes tipos de documentos e extra√ß√£o de informa√ß√µes
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from mangaba_agent import MangabaAgent
from protocols.mcp import ContextType, ContextPriority
import json
from datetime import datetime

def demo_contract_analysis():
    """Demonstra an√°lise de contratos"""
    print("üìÑ An√°lise de Contratos")
    print("=" * 40)
    
    agent = MangabaAgent(agent_id="contract_analyzer")
    
    # Exemplo de contrato
    contract_text = """
    CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS
    
    CONTRATANTE: Empresa ABC Ltda., CNPJ 12.345.678/0001-90
    CONTRATADO: Jo√£o Silva, CPF 123.456.789-00
    
    OBJETO: Desenvolvimento de sistema web
    PRAZO: 90 dias corridos a partir da assinatura
    VALOR: R$ 50.000,00 (cinquenta mil reais)
    
    PAGAMENTO: 30% na assinatura, 40% na entrega do prot√≥tipo, 30% na entrega final
    
    CL√ÅUSULA DE CONFIDENCIALIDADE: O contratado se compromete a manter sigilo
    sobre todas as informa√ß√µes confidenciais da contratante.
    
    MULTA POR ATRASO: 2% do valor total por dia de atraso na entrega.
    """
    
    print("üìã Analisando contrato...")
    
    # An√°lise estrutural
    analysis_prompt = f"""
    Analise o seguinte contrato e extraia as informa√ß√µes principais:
    
    {contract_text}
    
    Forne√ßa:
    1. Partes envolvidas
    2. Objeto do contrato
    3. Valores e prazos
    4. Cl√°usulas importantes
    5. Riscos identificados
    """
    
    analysis = agent.chat(analysis_prompt, use_context=True)
    print(f"üìä An√°lise: {analysis}")
    
    # Verifica√ß√£o de compliance
    compliance_prompt = """
    Com base no contrato analisado, verifique:
    1. Se todas as cl√°usulas obrigat√≥rias est√£o presentes
    2. Se os valores e prazos est√£o claramente definidos
    3. Se h√° cl√°usulas que podem gerar conflitos
    4. Sugest√µes de melhorias
    """
    
    compliance = agent.chat(compliance_prompt, use_context=True)
    print(f"‚úÖ Compliance: {compliance}")
    
    return {"analysis": analysis, "compliance": compliance}

def demo_financial_report_analysis():
    """Demonstra an√°lise de relat√≥rios financeiros"""
    print("\nüí∞ An√°lise de Relat√≥rios Financeiros")
    print("=" * 40)
    
    agent = MangabaAgent(agent_id="financial_analyzer")
    
    # Dados financeiros simulados
    financial_data = {
        "receitas": {
            "2023": 1500000,
            "2022": 1200000,
            "2021": 1000000
        },
        "despesas": {
            "2023": 1100000,
            "2022": 950000,
            "2021": 850000
        },
        "ativos": {
            "circulante": 800000,
            "nao_circulante": 2200000
        },
        "passivos": {
            "circulante": 400000,
            "nao_circulante": 1200000
        }
    }
    
    print("üìà Analisando dados financeiros...")
    
    # An√°lise de tend√™ncias
    trends_prompt = f"""
    Analise os seguintes dados financeiros e identifique tend√™ncias:
    
    {json.dumps(financial_data, indent=2)}
    
    Forne√ßa:
    1. An√°lise de crescimento de receitas
    2. Evolu√ß√£o das despesas
    3. Margem de lucro por ano
    4. Situa√ß√£o patrimonial
    5. Indicadores de liquidez
    """
    
    trends = agent.chat(trends_prompt, use_context=True)
    print(f"üìä Tend√™ncias: {trends}")
    
    # Proje√ß√µes
    projection_prompt = """
    Com base nos dados hist√≥ricos analisados, fa√ßa proje√ß√µes para 2024:
    1. Receita esperada
    2. Despesas projetadas
    3. Lucro estimado
    4. Recomenda√ß√µes estrat√©gicas
    """
    
    projections = agent.chat(projection_prompt, use_context=True)
    print(f"üîÆ Proje√ß√µes: {projections}")
    
    return {"trends": trends, "projections": projections}

def demo_legal_document_review():
    """Demonstra revis√£o de documentos legais"""
    print("\n‚öñÔ∏è Revis√£o de Documentos Legais")
    print("=" * 40)
    
    agent = MangabaAgent(agent_id="legal_reviewer")
    
    # Exemplo de termo de uso
    terms_text = """
    TERMOS DE USO - PLATAFORMA DIGITAL
    
    1. ACEITA√á√ÉO DOS TERMOS
    Ao utilizar nossa plataforma, voc√™ concorda com estes termos.
    
    2. USO PERMITIDO
    A plataforma destina-se apenas para uso pessoal e n√£o comercial.
    
    3. PROPRIEDADE INTELECTUAL
    Todo conte√∫do √© protegido por direitos autorais.
    
    4. LIMITA√á√ÉO DE RESPONSABILIDADE
    N√£o nos responsabilizamos por danos diretos ou indiretos.
    
    5. MODIFICA√á√ïES
    Podemos alterar estes termos a qualquer momento.
    
    6. LEI APLIC√ÅVEL
    Estes termos s√£o regidos pela lei brasileira.
    """
    
    print("üìú Revisando termos de uso...")
    
    # An√°lise legal
    legal_analysis_prompt = f"""
    Revise os seguintes termos de uso sob a perspectiva legal brasileira:
    
    {terms_text}
    
    Analise:
    1. Conformidade com a LGPD
    2. Conformidade com o CDC
    3. Cl√°usulas abusivas potenciais
    4. Lacunas importantes
    5. Sugest√µes de melhorias
    """
    
    legal_review = agent.chat(legal_analysis_prompt, use_context=True)
    print(f"‚öñÔ∏è Revis√£o Legal: {legal_review}")
    
    # Sugest√µes de adequa√ß√£o
    compliance_prompt = """
    Com base na revis√£o legal, sugira adequa√ß√µes espec√≠ficas para:
    1. Melhor prote√ß√£o de dados pessoais
    2. Maior transpar√™ncia para o usu√°rio
    3. Redu√ß√£o de riscos legais
    4. Conformidade regulat√≥ria
    """
    
    compliance_suggestions = agent.chat(compliance_prompt, use_context=True)
    print(f"üìã Sugest√µes: {compliance_suggestions}")
    
    return {"legal_review": legal_review, "suggestions": compliance_suggestions}

def demo_research_paper_analysis():
    """Demonstra an√°lise de artigos cient√≠ficos"""
    print("\nüî¨ An√°lise de Artigos Cient√≠ficos")
    print("=" * 40)
    
    agent = MangabaAgent(agent_id="research_analyzer")
    
    # Resumo de artigo cient√≠fico
    paper_abstract = """
    T√çTULO: Aplica√ß√£o de Intelig√™ncia Artificial na An√°lise de Sentimentos em Redes Sociais
    
    RESUMO: Este estudo investiga a efic√°cia de algoritmos de aprendizado de m√°quina
    na an√°lise de sentimentos de posts em redes sociais. Utilizamos um dataset de
    100.000 tweets coletados durante 6 meses, aplicando t√©cnicas de processamento
    de linguagem natural (NLP) e redes neurais convolucionais (CNN). Os resultados
    mostram uma acur√°cia de 87% na classifica√ß√£o de sentimentos positivos, negativos
    e neutros. O modelo proposto supera m√©todos tradicionais em 12% na precis√£o.
    
    PALAVRAS-CHAVE: intelig√™ncia artificial, an√°lise de sentimentos, redes sociais,
    processamento de linguagem natural, aprendizado de m√°quina
    
    METODOLOGIA: Coleta de dados via API do Twitter, pr√©-processamento com remo√ß√£o
    de stopwords e normaliza√ß√£o, treinamento de modelo CNN com valida√ß√£o cruzada.
    """
    
    print("üìö Analisando artigo cient√≠fico...")
    
    # An√°lise metodol√≥gica
    methodology_prompt = f"""
    Analise a metodologia do seguinte artigo cient√≠fico:
    
    {paper_abstract}
    
    Avalie:
    1. Rigor metodol√≥gico
    2. Tamanho e qualidade da amostra
    3. T√©cnicas utilizadas
    4. Validade dos resultados
    5. Limita√ß√µes do estudo
    """
    
    methodology_analysis = agent.chat(methodology_prompt, use_context=True)
    print(f"üîç An√°lise Metodol√≥gica: {methodology_analysis}")
    
    # Relev√¢ncia e impacto
    impact_prompt = """
    Com base no artigo analisado, avalie:
    1. Relev√¢ncia cient√≠fica do tema
    2. Contribui√ß√£o para o campo de estudo
    3. Aplicabilidade pr√°tica dos resultados
    4. Sugest√µes para pesquisas futuras
    5. Potencial de cita√ß√£o
    """
    
    impact_analysis = agent.chat(impact_prompt, use_context=True)
    print(f"üìà An√°lise de Impacto: {impact_analysis}")
    
    return {"methodology": methodology_analysis, "impact": impact_analysis}

def demo_technical_documentation_review():
    """Demonstra revis√£o de documenta√ß√£o t√©cnica"""
    print("\nüõ†Ô∏è Revis√£o de Documenta√ß√£o T√©cnica")
    print("=" * 40)
    
    agent = MangabaAgent(agent_id="tech_doc_reviewer")
    
    # Exemplo de documenta√ß√£o de API
    api_doc = """
    API DE PAGAMENTOS - DOCUMENTA√á√ÉO
    
    ENDPOINT: POST /api/v1/payments
    
    DESCRI√á√ÉO: Processa pagamentos via cart√£o de cr√©dito
    
    PAR√ÇMETROS:
    - amount (number, required): Valor do pagamento em centavos
    - currency (string, required): C√≥digo da moeda (BRL, USD)
    - card_token (string, required): Token do cart√£o
    - description (string, optional): Descri√ß√£o do pagamento
    
    RESPOSTA DE SUCESSO (200):
    {
      "id": "pay_123456",
      "status": "approved",
      "amount": 10000,
      "currency": "BRL"
    }
    
    C√ìDIGOS DE ERRO:
    - 400: Par√¢metros inv√°lidos
    - 401: Token de autentica√ß√£o inv√°lido
    - 402: Pagamento recusado
    - 500: Erro interno do servidor
    
    EXEMPLO DE USO:
    curl -X POST https://api.exemplo.com/v1/payments \
      -H "Authorization: Bearer TOKEN" \
      -d '{"amount": 10000, "currency": "BRL", "card_token": "card_123"}'
    """
    
    print("üìñ Revisando documenta√ß√£o de API...")
    
    # An√°lise de completude
    completeness_prompt = f"""
    Revise a seguinte documenta√ß√£o de API:
    
    {api_doc}
    
    Analise:
    1. Completude das informa√ß√µes
    2. Clareza das instru√ß√µes
    3. Exemplos pr√°ticos
    4. Tratamento de erros
    5. Informa√ß√µes de seguran√ßa
    """
    
    completeness_review = agent.chat(completeness_prompt, use_context=True)
    print(f"üìã Revis√£o de Completude: {completeness_review}")
    
    # Sugest√µes de melhoria
    improvement_prompt = """
    Com base na documenta√ß√£o analisada, sugira melhorias para:
    1. Facilitar a integra√ß√£o por desenvolvedores
    2. Reduzir d√∫vidas comuns
    3. Melhorar exemplos de c√≥digo
    4. Adicionar informa√ß√µes de seguran√ßa
    5. Incluir casos de uso avan√ßados
    """
    
    improvements = agent.chat(improvement_prompt, use_context=True)
    print(f"üí° Sugest√µes: {improvements}")
    
    return {"completeness": completeness_review, "improvements": improvements}

def demo_batch_document_processing():
    """Demonstra processamento em lote de documentos"""
    print("\nüì¶ Processamento em Lote de Documentos")
    print("=" * 40)
    
    agent = MangabaAgent(agent_id="batch_processor")
    
    # Simula√ß√£o de m√∫ltiplos documentos
    documents = [
        {
            "id": "DOC001",
            "type": "invoice",
            "content": "Nota Fiscal 123 - Valor: R$ 1.500,00 - Vencimento: 30/12/2024"
        },
        {
            "id": "DOC002",
            "type": "contract",
            "content": "Contrato de Loca√ß√£o - Prazo: 12 meses - Valor: R$ 2.000,00/m√™s"
        },
        {
            "id": "DOC003",
            "type": "report",
            "content": "Relat√≥rio Mensal - Vendas: R$ 50.000,00 - Crescimento: 15%"
        },
        {
            "id": "DOC004",
            "type": "email",
            "content": "Proposta comercial - Desconto de 10% para pagamento √† vista"
        }
    ]
    
    print(f"üìÑ Processando {len(documents)} documentos...")
    
    results = []
    
    for doc in documents:
        print(f"\nüîÑ Processando {doc['id']} ({doc['type']})...")
        
        # An√°lise espec√≠fica por tipo
        analysis_prompt = f"""
        Analise o seguinte documento do tipo '{doc['type']}':
        
        {doc['content']}
        
        Extraia:
        1. Informa√ß√µes principais
        2. Valores monet√°rios
        3. Datas importantes
        4. A√ß√µes necess√°rias
        5. Prioridade de tratamento
        """
        
        analysis = agent.chat(analysis_prompt, use_context=True)
        
        result = {
            "document_id": doc['id'],
            "type": doc['type'],
            "analysis": analysis,
            "processed_at": datetime.now().isoformat()
        }
        
        results.append(result)
        print(f"‚úÖ {doc['id']} processado")
    
    # Relat√≥rio consolidado
    consolidation_prompt = f"""
    Com base no processamento de {len(documents)} documentos, gere um relat√≥rio consolidado:
    
    Documentos processados: {[r['document_id'] for r in results]}
    
    Inclua:
    1. Resumo executivo
    2. Documentos por prioridade
    3. A√ß√µes recomendadas
    4. Pr√≥ximos passos
    """
    
    consolidated_report = agent.chat(consolidation_prompt, use_context=True)
    print(f"\nüìä Relat√≥rio Consolidado: {consolidated_report}")
    
    return {
        "processed_documents": len(results),
        "results": results,
        "consolidated_report": consolidated_report
    }

def main():
    """Executa demonstra√ß√£o completa de an√°lise de documentos"""
    print("üìÑ Mangaba Agent - An√°lise de Documentos")
    print("=" * 60)
    
    try:
        # Diferentes tipos de an√°lise
        contract_result = demo_contract_analysis()
        financial_result = demo_financial_report_analysis()
        legal_result = demo_legal_document_review()
        research_result = demo_research_paper_analysis()
        tech_doc_result = demo_technical_documentation_review()
        batch_result = demo_batch_document_processing()
        
        print("\nüéâ DEMONSTRA√á√ÉO DE AN√ÅLISE COMPLETA!")
        print("=" * 50)
        
        print("\nüìä Resumo dos Resultados:")
        print(f"   üìã Contratos analisados: 1")
        print(f"   üí∞ Relat√≥rios financeiros: 1")
        print(f"   ‚öñÔ∏è Documentos legais: 1")
        print(f"   üî¨ Artigos cient√≠ficos: 1")
        print(f"   üõ†Ô∏è Documenta√ß√£o t√©cnica: 1")
        print(f"   üì¶ Processamento em lote: {batch_result['processed_documents']} documentos")
        
        print("\nüöÄ Capacidades Demonstradas:")
        print("   ‚Ä¢ An√°lise contextual de contratos")
        print("   ‚Ä¢ Interpreta√ß√£o de dados financeiros")
        print("   ‚Ä¢ Revis√£o legal e compliance")
        print("   ‚Ä¢ Avalia√ß√£o de pesquisa cient√≠fica")
        print("   ‚Ä¢ Revis√£o de documenta√ß√£o t√©cnica")
        print("   ‚Ä¢ Processamento em lote eficiente")
        print("   ‚Ä¢ Extra√ß√£o de informa√ß√µes estruturadas")
        print("   ‚Ä¢ Gera√ß√£o de relat√≥rios consolidados")
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()