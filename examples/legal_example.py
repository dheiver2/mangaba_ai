#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemplo de Direito com Mangaba Agent
Demonstra aplica√ß√µes de IA em an√°lise jur√≠dica, contratos e compliance
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from mangaba_agent import MangabaAgent
from protocols.mcp import ContextType, ContextPriority
import json
import random
from datetime import datetime, timedelta

class LegalDataGenerator:
    """Gerador de dados jur√≠dicos sint√©ticos"""
    
    @staticmethod
    def generate_contract_data():
        """Gera dados de contratos para an√°lise"""
        contracts = [
            {
                "contract_id": "CONT_001",
                "type": "Contrato de Presta√ß√£o de Servi√ßos",
                "parties": ["Empresa ABC Ltda.", "Fornecedor XYZ S.A."],
                "value": 150000.00,
                "duration": "12 meses",
                "start_date": "2024-01-15",
                "end_date": "2025-01-14",
                "key_clauses": [
                    "Cl√°usula de confidencialidade",
                    "Penalidades por atraso",
                    "Rescis√£o antecipada",
                    "Foro de elei√ß√£o"
                ],
                "risk_level": "M√©dio",
                "compliance_status": "Conforme",
                "renewal_option": True,
                "governing_law": "Lei Brasileira"
            },
            {
                "contract_id": "CONT_002",
                "type": "Contrato de Compra e Venda",
                "parties": ["Comprador DEF Ltda.", "Vendedor GHI S.A."],
                "value": 500000.00,
                "duration": "Execu√ß√£o √∫nica",
                "start_date": "2024-03-01",
                "delivery_date": "2024-04-30",
                "key_clauses": [
                    "Garantia de qualidade",
                    "Condi√ß√µes de pagamento",
                    "Transfer√™ncia de propriedade",
                    "V√≠cios redibit√≥rios"
                ],
                "risk_level": "Alto",
                "compliance_status": "Pendente revis√£o",
                "warranty_period": "24 meses",
                "governing_law": "Lei Brasileira"
            },
            {
                "contract_id": "CONT_003",
                "type": "Contrato de Trabalho",
                "parties": ["Empresa JKL Ltda.", "Funcion√°rio MNO"],
                "salary": 8500.00,
                "position": "Gerente de Vendas",
                "start_date": "2024-02-01",
                "probation_period": "90 dias",
                "key_clauses": [
                    "Jornada de trabalho",
                    "Benef√≠cios",
                    "Cl√°usula de n√£o-concorr√™ncia",
                    "Confidencialidade"
                ],
                "risk_level": "Baixo",
                "compliance_status": "Conforme CLT",
                "benefits": ["Vale refei√ß√£o", "Plano de sa√∫de", "Vale transporte"],
                "governing_law": "CLT"
            }
        ]
        return contracts
    
    @staticmethod
    def generate_litigation_data():
        """Gera dados de processos judiciais"""
        cases = [
            {
                "case_id": "PROC_001",
                "case_number": "1234567-89.2024.8.26.0100",
                "court": "1¬™ Vara C√≠vel - SP",
                "case_type": "A√ß√£o de Cobran√ßa",
                "plaintiff": "Empresa ABC Ltda.",
                "defendant": "Cliente Inadimplente XYZ",
                "claim_value": 75000.00,
                "filing_date": "2024-01-10",
                "status": "Em andamento",
                "last_update": "2024-11-15",
                "next_hearing": "2024-12-20",
                "lawyer": "Dr. Jo√£o Silva - OAB/SP 123456",
                "probability_success": 85,
                "estimated_duration": "8-12 meses",
                "key_documents": ["Contrato", "Notas fiscais", "Correspond√™ncias"]
            },
            {
                "case_id": "PROC_002",
                "case_number": "9876543-21.2024.5.02.0001",
                "court": "2¬™ Vara do Trabalho - SP",
                "case_type": "Reclama√ß√£o Trabalhista",
                "plaintiff": "Ex-funcion√°rio DEF",
                "defendant": "Empresa GHI Ltda.",
                "claim_value": 45000.00,
                "filing_date": "2024-02-15",
                "status": "Aguardando per√≠cia",
                "last_update": "2024-11-10",
                "next_hearing": "2024-12-15",
                "lawyer": "Dra. Maria Santos - OAB/SP 654321",
                "probability_success": 60,
                "estimated_duration": "6-10 meses",
                "key_documents": ["CTPS", "Holerites", "Testemunhas"]
            },
            {
                "case_id": "PROC_003",
                "case_number": "5555666-77.2024.4.03.6100",
                "court": "Justi√ßa Federal - SP",
                "case_type": "Mandado de Seguran√ßa",
                "plaintiff": "Empresa JKL S.A.",
                "defendant": "Receita Federal",
                "claim_value": 200000.00,
                "filing_date": "2024-03-20",
                "status": "Liminar deferida",
                "last_update": "2024-11-20",
                "next_hearing": "2024-12-30",
                "lawyer": "Dr. Carlos Oliveira - OAB/SP 789012",
                "probability_success": 75,
                "estimated_duration": "12-18 meses",
                "key_documents": ["Auto de infra√ß√£o", "Defesa", "Jurisprud√™ncia"]
            }
        ]
        return cases
    
    @staticmethod
    def generate_compliance_data():
        """Gera dados de compliance"""
        compliance_areas = [
            {
                "area": "LGPD - Lei Geral de Prote√ß√£o de Dados",
                "compliance_score": 85,
                "last_audit": "2024-06-15",
                "next_audit": "2024-12-15",
                "requirements": [
                    "Mapeamento de dados pessoais",
                    "Pol√≠tica de privacidade atualizada",
                    "Treinamento de funcion√°rios",
                    "DPO nomeado",
                    "Procedimentos de resposta a incidentes"
                ],
                "gaps": ["Auditoria de fornecedores", "Testes de seguran√ßa"],
                "risk_level": "Baixo",
                "action_plan": "Implementar auditoria trimestral"
            },
            {
                "area": "Lei Anticorrup√ß√£o (Lei 12.846/2013)",
                "compliance_score": 92,
                "last_audit": "2024-08-10",
                "next_audit": "2025-02-10",
                "requirements": [
                    "C√≥digo de conduta",
                    "Canal de den√∫ncias",
                    "Due diligence de terceiros",
                    "Treinamentos peri√≥dicos",
                    "Monitoramento cont√≠nuo"
                ],
                "gaps": ["Atualiza√ß√£o de pol√≠ticas"],
                "risk_level": "Muito Baixo",
                "action_plan": "Revis√£o anual de pol√≠ticas"
            },
            {
                "area": "Direito do Consumidor (CDC)",
                "compliance_score": 78,
                "last_audit": "2024-05-20",
                "next_audit": "2024-11-20",
                "requirements": [
                    "SAC estruturado",
                    "Pol√≠tica de trocas e devolu√ß√µes",
                    "Informa√ß√µes claras sobre produtos",
                    "Contratos em linguagem simples",
                    "Respeito ao direito de arrependimento"
                ],
                "gaps": ["Melhoria no atendimento", "Revis√£o de contratos"],
                "risk_level": "M√©dio",
                "action_plan": "Treinamento da equipe de atendimento"
            }
        ]
        return compliance_areas

def demo_contract_analysis():
    """Demonstra an√°lise de contratos"""
    print("üìã An√°lise de Contratos")
    print("=" * 50)
    
    agent = MangabaAgent(agent_id="contract_analyst")
    
    # Gera dados de contratos
    contracts = LegalDataGenerator.generate_contract_data()
    
    print(f"üìÑ Analisando {len(contracts)} contratos...")
    
    # An√°lise de riscos contratuais
    risk_analysis_prompt = f"""
    Analise os riscos dos seguintes contratos:
    
    {json.dumps(contracts, indent=2)}
    
    Para cada contrato, identifique:
    1. Principais riscos jur√≠dicos
    2. Cl√°usulas problem√°ticas ou ausentes
    3. N√≠vel de exposi√ß√£o financeira
    4. Recomenda√ß√µes de mitiga√ß√£o
    5. Necessidade de revis√£o ou renegocia√ß√£o
    """
    
    risk_analysis = agent.chat(risk_analysis_prompt, use_context=True)
    print(f"‚ö†Ô∏è An√°lise de Riscos: {risk_analysis}")
    
    # Revis√£o de cl√°usulas
    clause_review_prompt = """
    Revise as cl√°usulas contratuais e sugira melhorias:
    
    1. Cl√°usulas de for√ßa maior e caso fortuito
    2. Penalidades e multas
    3. Condi√ß√µes de rescis√£o
    4. Foro e lei aplic√°vel
    5. Garantias e responsabilidades
    6. Confidencialidade e propriedade intelectual
    """
    
    clause_review = agent.chat(clause_review_prompt, use_context=True)
    print(f"üìù Revis√£o de Cl√°usulas: {clause_review}")
    
    # Compliance contratual
    compliance_check_prompt = """
    Verifique a conformidade dos contratos com:
    
    1. Legisla√ß√£o aplic√°vel
    2. Normas regulamentares
    3. Boas pr√°ticas do setor
    4. Jurisprud√™ncia relevante
    5. Pol√≠ticas internas da empresa
    """
    
    compliance_check = agent.chat(compliance_check_prompt, use_context=True)
    print(f"\n‚úÖ Verifica√ß√£o de Compliance: {compliance_check}")
    
    return {
        "contracts_analyzed": len(contracts),
        "risk_analysis": risk_analysis,
        "clause_review": clause_review,
        "compliance_check": compliance_check
    }

def demo_litigation_management():
    """Demonstra gest√£o de processos judiciais"""
    print("\n‚öñÔ∏è Gest√£o de Processos Judiciais")
    print("=" * 50)
    
    agent = MangabaAgent(agent_id="litigation_manager")
    
    # Gera dados de processos
    cases = LegalDataGenerator.generate_litigation_data()
    
    print(f"üìÅ Gerenciando {len(cases)} processos...")
    
    # An√°lise de probabilidade de sucesso
    success_analysis_prompt = f"""
    Analise a probabilidade de sucesso dos processos:
    
    {json.dumps(cases, indent=2)}
    
    Para cada processo, avalie:
    1. Fundamentos jur√≠dicos
    2. Qualidade das provas
    3. Jurisprud√™ncia aplic√°vel
    4. Hist√≥rico do ju√≠zo
    5. Estrat√©gia processual recomendada
    """
    
    success_analysis = agent.chat(success_analysis_prompt, use_context=True)
    print(f"üéØ An√°lise de Probabilidade: {success_analysis}")
    
    # Estrat√©gia processual
    strategy_prompt = """
    Desenvolva estrat√©gias processuais otimizadas:
    
    1. Linha de defesa/ataque principal
    2. Argumentos subsidi√°rios
    3. Provas a serem produzidas
    4. Recursos cab√≠veis
    5. Possibilidades de acordo
    6. Cronograma de a√ß√µes
    """
    
    strategy = agent.chat(strategy_prompt, use_context=True)
    print(f"üìã Estrat√©gia Processual: {strategy}")
    
    # Gest√£o de prazos
    deadline_management_prompt = """
    Crie um sistema de gest√£o de prazos:
    
    1. Prazos cr√≠ticos identificados
    2. Sistema de alertas
    3. Distribui√ß√£o de responsabilidades
    4. Backup de advogados
    5. Controle de qualidade
    """
    
    deadline_management = agent.chat(deadline_management_prompt, use_context=True)
    print(f"‚è∞ Gest√£o de Prazos: {deadline_management}")
    
    # An√°lise de custos
    cost_analysis_prompt = """
    Analise os custos processuais:
    
    1. Honor√°rios advocat√≠cios
    2. Custas judiciais
    3. Per√≠cias e dilig√™ncias
    4. Provis√µes cont√°beis
    5. An√°lise custo-benef√≠cio
    """
    
    cost_analysis = agent.chat(cost_analysis_prompt, use_context=True)
    print(f"\nüí∞ An√°lise de Custos: {cost_analysis}")
    
    return {
        "cases_managed": len(cases),
        "success_analysis": success_analysis,
        "strategy": strategy,
        "deadline_management": deadline_management,
        "cost_analysis": cost_analysis
    }

def demo_compliance_monitoring():
    """Demonstra monitoramento de compliance"""
    print("\nüõ°Ô∏è Monitoramento de Compliance")
    print("=" * 50)
    
    agent = MangabaAgent(agent_id="compliance_officer")
    
    # Gera dados de compliance
    compliance_areas = LegalDataGenerator.generate_compliance_data()
    
    print(f"üìä Monitorando {len(compliance_areas)} √°reas de compliance...")
    
    # Avalia√ß√£o de riscos de compliance
    compliance_assessment_prompt = f"""
    Avalie o status de compliance nas seguintes √°reas:
    
    {json.dumps(compliance_areas, indent=2)}
    
    Para cada √°rea, analise:
    1. N√≠vel atual de conformidade
    2. Gaps identificados
    3. Riscos de n√£o conformidade
    4. Impacto potencial de viola√ß√µes
    5. Prioridades de a√ß√£o
    """
    
    compliance_assessment = agent.chat(compliance_assessment_prompt, use_context=True)
    print(f"üìã Avalia√ß√£o de Compliance: {compliance_assessment}")
    
    # Plano de a√ß√£o
    action_plan_prompt = """
    Desenvolva um plano de a√ß√£o para compliance:
    
    1. A√ß√µes corretivas imediatas
    2. Melhorias de m√©dio prazo
    3. Investimentos necess√°rios
    4. Cronograma de implementa√ß√£o
    5. M√©tricas de acompanhamento
    6. Respons√°veis por cada a√ß√£o
    """
    
    action_plan = agent.chat(action_plan_prompt, use_context=True)
    print(f"üìÖ Plano de A√ß√£o: {action_plan}")
    
    # Treinamento e conscientiza√ß√£o
    training_program_prompt = """
    Crie um programa de treinamento em compliance:
    
    1. P√∫blico-alvo por √°rea
    2. Conte√∫do program√°tico
    3. Metodologia de ensino
    4. Avalia√ß√£o de efic√°cia
    5. Cronograma de treinamentos
    6. Certifica√ß√µes necess√°rias
    """
    
    training_program = agent.chat(training_program_prompt, use_context=True)
    print(f"üéì Programa de Treinamento: {training_program}")
    
    # Monitoramento cont√≠nuo
    monitoring_system_prompt = """
    Implemente um sistema de monitoramento cont√≠nuo:
    
    1. KPIs de compliance
    2. Dashboards executivos
    3. Alertas autom√°ticos
    4. Auditorias internas
    5. Relat√≥rios peri√≥dicos
    6. Integra√ß√£o com sistemas existentes
    """
    
    monitoring_system = agent.chat(monitoring_system_prompt, use_context=True)
    print(f"\nüìä Sistema de Monitoramento: {monitoring_system}")
    
    return {
        "compliance_areas": len(compliance_areas),
        "compliance_assessment": compliance_assessment,
        "action_plan": action_plan,
        "training_program": training_program,
        "monitoring_system": monitoring_system
    }

def demo_legal_research():
    """Demonstra pesquisa jur√≠dica"""
    print("\nüîç Pesquisa Jur√≠dica")
    print("=" * 50)
    
    agent = MangabaAgent(agent_id="legal_researcher")
    
    # Simula temas de pesquisa
    research_topics = [
        {
            "topic": "Responsabilidade Civil por Danos Ambientais",
            "context": "Empresa de minera√ß√£o com vazamento de rejeitos",
            "urgency": "Alta",
            "scope": "Jurisprud√™ncia STJ e STF"
        },
        {
            "topic": "Marco Civil da Internet - Responsabilidade de Provedores",
            "context": "Plataforma digital com conte√∫do ofensivo",
            "urgency": "M√©dia",
            "scope": "Doutrina e decis√µes recentes"
        },
        {
            "topic": "Lei de Recupera√ß√£o Judicial - Sucess√£o de Empresas",
            "context": "Aquisi√ß√£o de empresa em recupera√ß√£o",
            "urgency": "Alta",
            "scope": "Precedentes e s√∫mulas"
        }
    ]
    
    print(f"üìö Pesquisando {len(research_topics)} temas jur√≠dicos...")
    
    # Pesquisa jurisprudencial
    jurisprudence_research_prompt = f"""
    Realize pesquisa jurisprudencial sobre os seguintes temas:
    
    {json.dumps(research_topics, indent=2)}
    
    Para cada tema, forne√ßa:
    1. Principais precedentes
    2. Tend√™ncias jurisprudenciais
    3. Diverg√™ncias entre tribunais
    4. S√∫mulas aplic√°veis
    5. Teses em repercuss√£o geral
    """
    
    jurisprudence_research = agent.chat(jurisprudence_research_prompt, use_context=True)
    print(f"‚öñÔ∏è Pesquisa Jurisprudencial: {jurisprudence_research}")
    
    # An√°lise doutrin√°ria
    doctrine_analysis_prompt = """
    Analise a doutrina sobre os temas pesquisados:
    
    1. Principais autores e obras
    2. Correntes doutrin√°rias
    3. Debates acad√™micos atuais
    4. Propostas de reforma legislativa
    5. Direito comparado
    """
    
    doctrine_analysis = agent.chat(doctrine_analysis_prompt, use_context=True)
    print(f"üìñ An√°lise Doutrin√°ria: {doctrine_analysis}")
    
    # Monitoramento legislativo
    legislative_monitoring_prompt = """
    Monitore mudan√ßas legislativas relevantes:
    
    1. Projetos de lei em tramita√ß√£o
    2. Regulamenta√ß√µes em consulta p√∫blica
    3. Medidas provis√≥rias
    4. Resolu√ß√µes de √≥rg√£os reguladores
    5. Impacto nas pr√°ticas empresariais
    """
    
    legislative_monitoring = agent.chat(legislative_monitoring_prompt, use_context=True)
    print(f"\nüèõÔ∏è Monitoramento Legislativo: {legislative_monitoring}")
    
    return {
        "research_topics": len(research_topics),
        "jurisprudence_research": jurisprudence_research,
        "doctrine_analysis": doctrine_analysis,
        "legislative_monitoring": legislative_monitoring
    }

def demo_document_automation():
    """Demonstra automa√ß√£o de documentos jur√≠dicos"""
    print("\nüìÑ Automa√ß√£o de Documentos Jur√≠dicos")
    print("=" * 50)
    
    agent = MangabaAgent(agent_id="document_automation")
    
    # Simula tipos de documentos
    document_types = [
        {
            "type": "Contrato de Presta√ß√£o de Servi√ßos",
            "complexity": "M√©dia",
            "variables": ["Partes", "Objeto", "Valor", "Prazo", "Condi√ß√µes"],
            "clauses": 15,
            "review_time": "2 horas"
        },
        {
            "type": "Peti√ß√£o Inicial",
            "complexity": "Alta",
            "variables": ["Autor", "R√©u", "Causa de Pedir", "Pedido", "Valor"],
            "sections": 8,
            "review_time": "4 horas"
        },
        {
            "type": "Parecer Jur√≠dico",
            "complexity": "Alta",
            "variables": ["Consulente", "Quest√£o", "Fundamenta√ß√£o", "Conclus√£o"],
            "pages": 12,
            "review_time": "6 horas"
        }
    ]
    
    print(f"ü§ñ Automatizando {len(document_types)} tipos de documentos...")
    
    # An√°lise de automa√ß√£o
    automation_analysis_prompt = f"""
    Analise as possibilidades de automa√ß√£o para os documentos:
    
    {json.dumps(document_types, indent=2)}
    
    Para cada tipo, avalie:
    1. Grau de padroniza√ß√£o poss√≠vel
    2. Vari√°veis que podem ser automatizadas
    3. Pontos que requerem revis√£o humana
    4. Economia de tempo estimada
    5. Riscos da automa√ß√£o
    """
    
    automation_analysis = agent.chat(automation_analysis_prompt, use_context=True)
    print(f"‚öôÔ∏è An√°lise de Automa√ß√£o: {automation_analysis}")
    
    # Templates inteligentes
    smart_templates_prompt = """
    Desenvolva templates inteligentes:
    
    1. Estrutura modular de cl√°usulas
    2. Campos condicionais
    3. Valida√ß√µes autom√°ticas
    4. Integra√ß√£o com bases de dados
    5. Versionamento de templates
    6. Controle de qualidade
    """
    
    smart_templates = agent.chat(smart_templates_prompt, use_context=True)
    print(f"üìã Templates Inteligentes: {smart_templates}")
    
    # Workflow de aprova√ß√£o
    approval_workflow_prompt = """
    Crie workflows de aprova√ß√£o de documentos:
    
    1. N√≠veis de aprova√ß√£o por tipo
    2. Crit√©rios de escala√ß√£o
    3. Prazos de revis√£o
    4. Notifica√ß√µes autom√°ticas
    5. Hist√≥rico de altera√ß√µes
    6. Assinatura digital
    """
    
    approval_workflow = agent.chat(approval_workflow_prompt, use_context=True)
    print(f"\n‚úÖ Workflow de Aprova√ß√£o: {approval_workflow}")
    
    return {
        "document_types": len(document_types),
        "automation_analysis": automation_analysis,
        "smart_templates": smart_templates,
        "approval_workflow": approval_workflow
    }

def main():
    """Executa demonstra√ß√£o completa de solu√ß√µes jur√≠dicas"""
    print("‚öñÔ∏è Mangaba Agent - Solu√ß√µes Jur√≠dicas")
    print("=" * 80)
    
    try:
        # Demonstra√ß√µes de diferentes √°reas jur√≠dicas
        contract_result = demo_contract_analysis()
        litigation_result = demo_litigation_management()
        compliance_result = demo_compliance_monitoring()
        research_result = demo_legal_research()
        automation_result = demo_document_automation()
        
        print("\nüéâ DEMONSTRA√á√ÉO JUR√çDICA COMPLETA!")
        print("=" * 70)
        
        print("\nüìä Resumo dos Resultados:")
        print(f"   üìã Contratos analisados: {contract_result['contracts_analyzed']}")
        print(f"   ‚öñÔ∏è Processos gerenciados: {litigation_result['cases_managed']}")
        print(f"   üõ°Ô∏è √Åreas de compliance: {compliance_result['compliance_areas']}")
        print(f"   üîç Temas pesquisados: {research_result['research_topics']}")
        print(f"   üìÑ Tipos de documentos: {automation_result['document_types']}")
        
        print(f"\n‚öñÔ∏è Capacidades Demonstradas:")
        print("   ‚Ä¢ An√°lise de riscos contratuais")
        print("   ‚Ä¢ Revis√£o de cl√°usulas e termos")
        print("   ‚Ä¢ Gest√£o de processos judiciais")
        print("   ‚Ä¢ Estrat√©gia processual")
        print("   ‚Ä¢ Monitoramento de compliance")
        print("   ‚Ä¢ Avalia√ß√£o de conformidade")
        print("   ‚Ä¢ Pesquisa jurisprudencial")
        print("   ‚Ä¢ An√°lise doutrin√°ria")
        print("   ‚Ä¢ Monitoramento legislativo")
        print("   ‚Ä¢ Automa√ß√£o de documentos")
        print("   ‚Ä¢ Templates inteligentes")
        print("   ‚Ä¢ Workflows de aprova√ß√£o")
        print("   ‚Ä¢ Due diligence automatizada")
        print("   ‚Ä¢ Gest√£o de prazos processuais")
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o jur√≠dica: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()